---
name: Setup LOLCODE
author: Yevhen Fabizhevskyi
description: This action sets up a LOLCODE interpreter called LCI.
branding:
  icon: terminal
  color: gray-dark
inputs:
  version:
    description: LCI version. Defaults to the latest version.
    required: false
    default: "latest"
  force:
    description: |
      If "true" it installs LCI even if it is already installed on a runner.
      Otherwise, skips installation.
    required: false
    default: "false"
  github-token:
    description: |
      GitHub token that is used to send requests to GitHub API such as getting
      latest release. Defaults to the token provided by GitHub Actions environment.
    required: false
    default: ${{ github.token }}
outputs:
  installed:
    description: Whether LCI was installed or not.
    value: "${{ steps.install-lci.outcome == 'success' }}"
runs:
  using: "composite"
  steps:
    - name: Fail
      if: ${{ runner.os == 'Windows' }}
      run: |
        echo "::error title=OS is not supported::${RUNNER_OS} ${RUNNER_ARCH} is not supported"
        exit 1
      shell: sh

    - name: Collect info
      id: info
      env:
        INPUT_FORCE: "${{ inputs.force }}"
      run: ./collect-info.sh "${INPUT_FORCE}"
      shell: sh
      working-directory: "${{ github.action_path }}/src"

    - name: Setup dependencies
      if: ${{ runner.os == 'Linux' }}
      run: sudo apt-get install libreadline-dev
      shell: sh

    - name: Setup jq
      if: ${{ steps.info.outputs.bin-installed == 'false' }}
      uses: dcarbone/install-jq-action@v3

    - name: Get latest release
      if: ${{ steps.info.outputs.bin-installed == 'false' && inputs.version == 'latest' }}
      id: latest-release
      env:
        INPUT_GITHUB_TOKEN: "${{ inputs.github-token }}"
      run: ./get-latest-release.sh "justinmeza/lci" "${INPUT_GITHUB_TOKEN}"
      shell: sh
      working-directory: "${{ github.action_path }}/src"

    - name: Download LCI
      if: ${{ steps.info.outputs.bin-installed == 'false' }}
      uses: actions/checkout@v4
      with:
        repository: "justinmeza/lci"
        ref: ${{ format('v{0}', inputs.version == 'latest' && steps.latest-release.outputs.version || inputs.version) }}
        fetch-depth: 1
        path: ${{ steps.info.outputs.bin-dir }}

    - name: Install LCI
      if: ${{ steps.info.outputs.bin-installed == 'false' }}
      id: install-lci
      run: |
        cmake .
        make
        echo "$(pwd)" >> "$GITHUB_PATH"
      shell: sh
      working-directory: ${{ steps.info.outputs.bin-path }}

    - name: Print version
      run: lci -v
      shell: sh
